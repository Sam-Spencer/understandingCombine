#title "Filter"
#subtitle "to block or not to block"

# <%= title %>

`.filter` (Publishers.Filter) takes a function (the _filter function_) that receives the published value from upstream and stops it from proceeding further down the pipeline unless it passes some test. The function returns a Bool saying whether the value should be permitted to proceed down the pipeline. Think of a `filter` as a `map` to nothing.

In this (rather silly) example, we're running a Timer, but there's also a UISwitch `mySwitch` in our interface, and if the UISwitch is off, no Timer firing signals get through the pipeline:

    Timer.publish(every: 1, on: .main, in: .default)
        .autoconnect()
        .filter {_ in self.mySwitch.isOn}

There is also a `.tryFilter` (Publishers.TryFilter); it works [similarly](operatorsMap) to `.tryMap`, so I won't say more about it.


